class LRUCache {
    Map<Integer, Node> map;
    int cache_capacity = 0;
    final Node head = new Node();
    final Node tail = new Node();

    public LRUCache(int capacity) {
        map = new HashMap(capacity);
        this.cache_capacity = capacity;
        head.next = tail;
        tail.prev = head;
    }
    
    public int get(int key) {
        int result = -1;
        Node node = map.get(key);
        if(node != null){
            result = node.value;
            remove(node);
            add(node);
        }
        return result;
    }
    
    public void put(int key, int value) {
        Node node = map.get(key);
        if(node != null){
            node.value = value;
            remove(node);
            add(node);
        }else{
            if(map.size() == cache_capacity){
                map.remove(tail.prev.key);
                remove(tail.prev);
            }
            Node new_node = new Node();
            new_node.key = key;
            new_node.value = value;
            map.put(key,new_node);
            add(new_node);
        }
    }
    public void add(Node node){
        Node head_next = head.next;                     
        head.next = node;
        node.prev = head;
        node.next = head_next;
        head_next.prev = node;
        
    }
    public void remove(Node node){
        Node node_prev = node.prev;
        Node node_next = node.next;
        
        node_prev.next = node_next;
        node_next.prev = node_prev;
        
    }
    class Node{
        int value;
        int key;
        Node prev;
        Node next;
    }
}
